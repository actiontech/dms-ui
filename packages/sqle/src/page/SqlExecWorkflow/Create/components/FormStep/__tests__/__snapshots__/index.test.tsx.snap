// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test FormStep should match snapshot 1`] = `
<Styled(section)>
  <PageHeader
    extra={
      <BasicButton
        disabled={false}
        onClick={[Function]}
      >
        重置
      </BasicButton>
    }
    fixed={true}
    title={
      <BackToList
        isAuditing={false}
      />
    }
  />
  <Styled(Form)
    className="hasTopHeader clearPaddingBottom"
    colon={false}
    form={
      {
        "__INTERNAL__": {
          "itemRef": [Function],
        },
        "_init": true,
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldWarning": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFieldValue": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    labelAlign="left"
    layout="vertical"
  >
    <BaseInfoForm />
  </Styled(Form)>
  <Styled(Styled(Form))
    colon={false}
    form={
      {
        "__INTERNAL__": {
          "itemRef": [Function],
        },
        "_init": true,
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldWarning": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFieldValue": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    labelAlign="left"
  >
    <SqlAuditInfoForm
      auditAction={[MockFunction]}
      dbSourceInfoCollection={
        {
          "set": [MockFunction],
          "value": {
            "0": {},
          },
        }
      }
      handleInstanceNameChange={[Function]}
      instanceTestConnectResults={
        {
          "set": [MockFunction],
          "value": [],
        }
      }
      isAuditing={
        {
          "set": [MockFunction],
          "value": false,
        }
      }
      isDisabledForDifferenceSql={
        {
          "set": [MockFunction],
          "value": false,
        }
      }
      resetAllSharedData={[MockFunction]}
      sqlStatementTabActiveKey={
        {
          "set": [MockFunction],
          "value": "1",
        }
      }
    />
  </Styled(Styled(Form))>
</Styled(section)>
`;
