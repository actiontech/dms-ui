// Generated by actionsky-cli api-mocks, do not modify this file.

import sql_version from '../../../../api/sqle/service/sql_version';
import { createSpySuccessResponse } from '../../common';
import {
  getSqlVersionListV1MockData,
  getSqlVersionDetailV1MockData,
  GetWorkflowsThatCanBeAssociatedToVersionV1MockData,
  getDependenciesBetweenStageInstanceV1MockData
} from './data';

class Sql_versionMockService {
  public mockAllApi(): void {
    this.mockGetSqlVersionListV1();
    this.mockCreateSqlVersionV1();
    this.mockGetSqlVersionDetailV1();
    this.mockDeleteSqlVersionV1();
    this.mockUpdateSqlVersionV1();
    this.mockBatchExecuteWorkflowsV1();
    this.mockBatchReleaseWorkflowsV1();
    this.mockLockSqlVersionV1();
    this.mockGetWorkflowsThatCanBeAssociatedToVersionV1();
    this.mockBatchAssociateWorkflowsWithVersionV1();
    this.mockGetDependenciesBetweenStageInstanceV1();
  }

  public mockGetSqlVersionListV1() {
    const spy = jest.spyOn(sql_version, 'getSqlVersionListV1');
    spy.mockImplementation(() =>
      createSpySuccessResponse(getSqlVersionListV1MockData)
    );
    return spy;
  }

  public mockCreateSqlVersionV1() {
    const spy = jest.spyOn(sql_version, 'createSqlVersionV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockGetSqlVersionDetailV1() {
    const spy = jest.spyOn(sql_version, 'getSqlVersionDetailV1');
    spy.mockImplementation(() =>
      createSpySuccessResponse(getSqlVersionDetailV1MockData)
    );
    return spy;
  }

  public mockDeleteSqlVersionV1() {
    const spy = jest.spyOn(sql_version, 'deleteSqlVersionV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockUpdateSqlVersionV1() {
    const spy = jest.spyOn(sql_version, 'updateSqlVersionV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockBatchExecuteWorkflowsV1() {
    const spy = jest.spyOn(sql_version, 'batchExecuteWorkflowsV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockBatchReleaseWorkflowsV1() {
    const spy = jest.spyOn(sql_version, 'batchReleaseWorkflowsV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockLockSqlVersionV1() {
    const spy = jest.spyOn(sql_version, 'lockSqlVersionV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockGetWorkflowsThatCanBeAssociatedToVersionV1() {
    const spy = jest.spyOn(
      sql_version,
      'GetWorkflowsThatCanBeAssociatedToVersionV1'
    );
    spy.mockImplementation(() =>
      createSpySuccessResponse(
        GetWorkflowsThatCanBeAssociatedToVersionV1MockData
      )
    );
    return spy;
  }

  public mockBatchAssociateWorkflowsWithVersionV1() {
    const spy = jest.spyOn(sql_version, 'batchAssociateWorkflowsWithVersionV1');
    spy.mockImplementation(() => createSpySuccessResponse({}));
    return spy;
  }

  public mockGetDependenciesBetweenStageInstanceV1() {
    const spy = jest.spyOn(
      sql_version,
      'getDependenciesBetweenStageInstanceV1'
    );
    spy.mockImplementation(() =>
      createSpySuccessResponse(getDependenciesBetweenStageInstanceV1MockData)
    );
    return spy;
  }
}

export default new Sql_versionMockService();
