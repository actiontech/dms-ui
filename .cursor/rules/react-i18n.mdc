---
description: 
globs: 
alwaysApply: true
---
# 多语言国际化

本项目为 monorepo 结构，采用 react-i18n 进行多语言国际化，语言包组织结构及使用规则如下：

## 语言包路径和结构

- 每个子包的语言包位于 `src/locale` 目录下
- 默认语言为中文，位于 `src/locale/zh-CN` 目录
- 英文语言包位于 `src/locale/en-US` 目录
- 每个语言包目录下按功能模块划分多个 TS 文件，例如：
  - `dmsLogin.ts` - 登录相关
  - `dmsSystem.ts` - 系统相关
  - `dmsDataSource.ts` - 数据源相关

## 语言包文件结构

每个语言包文件导出一个默认对象，包含了该模块的所有文本：

```typescript
// src/locale/zh-CN/dmsLogin.ts
export default {
  login: '登录',
  otherMethod: '其他登录方式',
  loginButtonDisabledTips: '当前已禁用账密登录',
  // ...更多文本
};
```

## 语言包引用方式

1. 在组件中引入 `useTranslation` hook：
```typescript
import { useTranslation } from 'react-i18next';

const MyComponent = () => {
  const { t } = useTranslation();
  
  return <div>{t('dmsLogin.login')}</div>;
};
```

2. i18n key 的命名规则：
   - 采用模块名加具体文本标识符的形式：`moduleName.textKey`
   - 例如：`dmsLogin.login`，`dmsSystem.settings` 等
   - 多层级嵌套时使用点号分隔：`dmsLogin.oauth.title`

3. 带参数的翻译：
```typescript
t('common.form.rule.require', { name: t('common.username') })
```

## 语言包聚合方式

每个包的语言包通过 `src/locale/index.ts` 聚合并初始化：

```typescript
// 引入各模块语言包
import zhCN from './zh-CN';
import enUS from './en-US';

// 初始化 i18n
i18n.use(initReactI18next).init({
  resources: {
    [SupportLanguage.zhCN]: allZhCN,
    [SupportLanguage.enUS]: allEnUS
  },
  // ...其他配置
});
```

## 注意事项

- 生成新代码时，请确保仅生成中文语言包相关内容
- 查找特定文本时，应通过 i18nKey 找到对应的中文翻译
- 在 monorepo 结构中，各子包语言包会在最终构建时合并
