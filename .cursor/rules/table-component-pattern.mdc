---
description: 
globs: 
alwaysApply: false
---
# 创建Table流程

本规则描述了在项目中如何创建一个以Table为基础的组件。**本规则仅适用于创建新的表格，且只需生成columns和Table组件。禁止生成操作列、筛选、功能按钮等功能。**

## 核心结构

Table 组件包含如下核心结构：

### 1. 数据获取

- 使用 `useTableRequestParams` 获取表格参数（如分页等）。
- 使用 `useTableRequestError` 处理请求错误。
- 使用 `useRequest` 获取表格数据，**务必为params标注TS类型**。
- 通过 `EventEmitter` 监听刷新事件。


注意：
- 请严格根据 @packages/shared/lib/components/ActiontechTable/hooks/useTableRequestError.tsx 文件内`useTableRequestError` 中 `handleTableRequestError` 得到的返回值数据类型来注入表格数据
- 每个子包(sqle/base/shared)存在各自的 `EmitterKey` 以及 `EventEmitter`, 请给正确的 `EmitterKey` 添加相关数据以及使用正确的 `EventEmitter` 来注册事件
- `handleTableRequestError` 方法参数仅需要传入 `api服务.获取数据方法(params)` 即可，在 `handleTableRequestError` 中将会执行处理数据格式, 正常经过 `handleTableRequestError` 处理后得到的 `listData` 的数据格式为 `{ list: T['data']; total: number }`.
示例：

```tsx
const { tableChange, pagination } = useTableRequestParams<数据类型, 参数类型>();
const { requestErrorMessage, handleTableRequestError } = useTableRequestError();

const {
  data: listData,
  loading,
  refresh: refreshData
} = useRequest(() => {
  const params: 获取数据方法的参数类型 = {
    page_index: String(pagination.page_index),
    page_size: String(pagination.page_size),
    // ...其他参数
  };
  return handleTableRequestError(
    api服务.获取数据方法(params)
  );
});

useEffect(() => {
  const { unsubscribe } = EventEmitter.subscribe(
    EmitterKey.刷新事件名称,
    refreshData
  );
  return unsubscribe;
}, [refreshData]);
```

### 2. Table Column 定义

- 列定义需单独放在 table 目录下的 `column.tsx` 文件中。
- 在 table 组件中引用该 columns 文件。
- 需要在正确的文件位置中生成columns需要的语言包数据。
- Column 的定义请使用一个函数, 而不是 React 组件或者 hooks, 内部需要的 `t` 函数请从当前包内的 `src/locale` 中导入
- 示例：

```tsx
export const WhitelistColumn = (): ActiontechTableColumn<
  DataItemType,
  ParamsType
> => {
  return [
    {
      dataIndex: 'field key2',
      title: () => t('i18n key2'),
      render: (val) => {
        if (!val) return '-';
        return val;
      }
    },
    {
      dataIndex: 'field key',
      title: () => t('i18n key'),
      render: (value) => {
        return formatTime(value, '-');
      }
    }
  ];
};
```

### 3. Table Render 方法定义

- 使用项目公共组件 `ActiontechTable` 进行渲染。
- 示例：

```tsx
<ActiontechTable
  dataSource={listData?.list}
  rowKey={(record: IAuditWhitelistResV1) => `${record?.audit_whitelist_id}`}
  pagination={{ total: listData?.total ?? 0 }}
  loading={loading}
  columns={columns}
  errorMessage={requestErrorMessage}
/>
```

## 最佳实践

1. 使用 `useRequest` 处理 API 请求和加载状态。
2. 将表格列定义抽离到单独文件中。
3. 通过 `EventEmitter` 处理跨组件通信。

---

**注意：本规则仅限于生成 columns 和 Table 组件，禁止生成操作列、筛选、功能按钮等功能。**
